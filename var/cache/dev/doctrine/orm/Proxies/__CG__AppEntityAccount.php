<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Account extends \App\Entity\Account implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Account' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Account' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Account' . "\0" . 'balance', '' . "\0" . 'App\\Entity\\Account' . "\0" . 'departureTransactions', '' . "\0" . 'App\\Entity\\Account' . "\0" . 'arrivalTransactions', '' . "\0" . 'App\\Entity\\Account' . "\0" . 'beneficiary'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Account' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Account' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Account' . "\0" . 'balance', '' . "\0" . 'App\\Entity\\Account' . "\0" . 'departureTransactions', '' . "\0" . 'App\\Entity\\Account' . "\0" . 'arrivalTransactions', '' . "\0" . 'App\\Entity\\Account' . "\0" . 'beneficiary'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Account $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(string $name): \App\Entity\Account
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getBalance(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBalance', []);

        return parent::getBalance();
    }

    /**
     * {@inheritDoc}
     */
    public function addToBalance($amount): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addToBalance', [$amount]);

        return parent::addToBalance($amount);
    }

    /**
     * {@inheritDoc}
     */
    public function substractFromBalance($amount): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'substractFromBalance', [$amount]);

        return parent::substractFromBalance($amount);
    }

    /**
     * {@inheritDoc}
     */
    public function setBalance(string $balance): \App\Entity\Account
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBalance', [$balance]);

        return parent::setBalance($balance);
    }

    /**
     * {@inheritDoc}
     */
    public function getDepartureTransactions(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDepartureTransactions', []);

        return parent::getDepartureTransactions();
    }

    /**
     * {@inheritDoc}
     */
    public function addDepartureTransaction(\App\Entity\Transaction $transaction): \App\Entity\Account
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDepartureTransaction', [$transaction]);

        return parent::addDepartureTransaction($transaction);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDepartureTransaction(\App\Entity\Transaction $transaction): \App\Entity\Account
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDepartureTransaction', [$transaction]);

        return parent::removeDepartureTransaction($transaction);
    }

    /**
     * {@inheritDoc}
     */
    public function getArrivalTransactions(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArrivalTransactions', []);

        return parent::getArrivalTransactions();
    }

    /**
     * {@inheritDoc}
     */
    public function addArrivalTransaction(\App\Entity\Transaction $arrivalTransaction): \App\Entity\Account
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addArrivalTransaction', [$arrivalTransaction]);

        return parent::addArrivalTransaction($arrivalTransaction);
    }

    /**
     * {@inheritDoc}
     */
    public function removeArrivalTransaction(\App\Entity\Transaction $arrivalTransaction): \App\Entity\Account
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeArrivalTransaction', [$arrivalTransaction]);

        return parent::removeArrivalTransaction($arrivalTransaction);
    }

    /**
     * {@inheritDoc}
     */
    public function getBeneficiary(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBeneficiary', []);

        return parent::getBeneficiary();
    }

    /**
     * {@inheritDoc}
     */
    public function addBeneficiary(\App\Entity\Account $beneficiary): \App\Entity\Account
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addBeneficiary', [$beneficiary]);

        return parent::addBeneficiary($beneficiary);
    }

    /**
     * {@inheritDoc}
     */
    public function removeBeneficiary(\App\Entity\Account $beneficiary): \App\Entity\Account
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeBeneficiary', [$beneficiary]);

        return parent::removeBeneficiary($beneficiary);
    }

}
